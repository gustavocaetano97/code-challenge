---

x-meltano-image: &meltano-image
  build: .

x-meltano-env: &meltano-env
  MELTANO_DATABASE_URI: ${MELTANO_DATABASE_URI}
#  AIRFLOW__CORE__SQL_ALCHEMY_CONN: ${AIRFLOW_DATABASE_URI}
#  AIRFLOW__CORE__EXECUTOR: LocalExecutor

services:
  meltano:
    <<: *meltano-image
    env_file:
      - .env
    environment:
      <<: *meltano-env
      # <<: *airflow-env ]
    volumes:
      - ./etl_meltano:/project
      - ./logs/elt:/project/.meltano/logs/elt
      - ./etl_meltano/data/tap-csv:/project/data/tap-csv
      - ./etl_meltano/data/tap-postgres:/project/data/tap-postgres
      - ./etl_meltano/.meltano:/project/.meltano
    expose:
      - 5000
    ports:
      - 5000:5000
    depends_on:
      - meltano-system-db
    networks:
      - meltano
      - airflow

  meltano-system-db:
    image: postgres
    environment:
      POSTGRES_PASSWORD: ${MELTANO_DB_PASSWORD}
      POSTGRES_DB: ${MELTANO_DB_NAME}
      POSTGRES_USER: ${MELTANO_DB_USER}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - db_meltano:/var/lib/postgresql/data
    expose:
      - 5432
    networks:
      - meltano
    restart: unless-stopped

  # # Uncomment if you are using the Airflow orchestrator, delete otherwise
  airflow-scheduler:
    <<: *meltano-image
    command: invoke airflow scheduler
    env_file:
      - .env
    environment:
      <<: *meltano-env
      # <<: *airflow-env ]
    volumes:
      - ./logs/elt:/project/.meltano/logs/elt
      - ./etl_meltano/data/tap-csv:/project/data/tap-csv
      - ./etl_meltano/data/tap-postgres:/project/data/tap-postgres
      - ./etl_meltano/.meltano:/project/.meltano
    expose:
      - 8793
    depends_on:
      - meltano-system-db
      - airflow-system-db
    networks:
      - meltano
      - airflow

  airflow-webserver:
    <<: *meltano-image
    command: invoke airflow webserver
    env_file:
      - .env
    environment:
      <<: *meltano-env
      # <<: *airflow-env ]
    expose:
      - 8080
    volumes:
      - ./logs/elt:/project/.meltano/logs/elt
      - ./etl_meltano/data/tap-csv:/project/data/tap-csv
      - ./etl_meltano/data/tap-postgres:/project/data/tap-postgres
      - ./etl_meltano/.meltano:/project/.meltano
    ports:
      - 8080:8080
    depends_on:
      - meltano-system-db
      - airflow-system-db
    networks:
      - meltano
      - airflow

  airflow-system-db:
    image: postgres
    environment:
      POSTGRES_PASSWORD: ${AIRFLOW_DB_PASSWORD}
      POSTGRES_DB: ${AIRFLOW_DB_NAME}
      POSTGRES_USER: ${AIRFLOW_DB_USER}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - db_airflow:/var/lib/postgresql/data
    expose:
      - 5432
    networks:
      - airflow
    restart: unless-stopped

  north-db:
    image: postgres:13
    environment:
      POSTGRES_DB: ${NORTHWIND_DB_NAME}
      POSTGRES_USER: ${NORTHWIND_DB_USER}
      POSTGRES_PASSWORD: ${NORTHWIND_DB_PASSWORD}
    volumes:
      - ./etl_meltano/data/northwind.sql:/docker-entrypoint-initdb.d/northwind.sql
      - ./db_north:/var/lib/postgresql/data
    networks:
      - meltano
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U northwind_user -d northwind"]
      interval: 10s
      timeout: 5s
      retries: 5

  final-db:
    image: postgres:13
    environment:
      POSTGRES_DB: ${FINALWIND_DB_NAME}
      POSTGRES_USER: ${FINALWIND_DB_USER}
      POSTGRES_PASSWORD: ${FINALWIND_DB_PASSWORD}
    volumes:
      - ./db_final:/var/lib/postgresql/data
    networks:
      - meltano
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U finalwind_user -d finalwind"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

networks:
  meltano:
  # # Uncomment if you are using the Airflow orchestrator, delete otherwise
  airflow:

volumes:
  db_meltano:
    driver: local
  # # Uncomment if you are using the Airflow orchestrator, delete otherwise
  db_north:
    driver: local
  db_airflow:
    driver: local
  db_final:
    driver: local
